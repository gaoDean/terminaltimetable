#!/bin/sh


host="https://caulfieldsync.vercel.app/api"
data="$HOME/.local/share/ttbl"
cache="$HOME/.cache/ttbl"
timetable="${cache}/timetable.json"

if [ ! -f "${data}/token" ]; then
	echo "No token provided"
fi

help="\
usage: ttbl [<options>] <date>

  -h, --help                show this usage summary and exit
  -token USER_ID PASSWORD   get the token for this user
  -sync FORWARD BACKWARD    sync classes <FORWARD> days into the future, <BACKWARD> days into the past
  -mro                      machine-readable output (semicolon seperated)"

col_black="\x1b[38;5;8m"
col_red="\x1b[38;5;9m"
col_green="\x1b[38;5;10m"
col_yellow="\x1b[38;5;11m"
col_blue="\x1b[38;5;12m"
col_magenta="\x1b[38;5;13m"
col_cyan="\x1b[38;5;14m"
col_white="\x1b[38;5;15m"
col_normal="\x1b[0m"

if [ -z "$TTBL_PERIOD" ]; then TTBL_PERIOD="$col_blue"; fi
if [ -z "$TTBL_ROOM" ]; then TTBL_ROOM="$col_magenta"; fi
if [ -z "$TTBL_SUBJECT" ]; then TTBL_SUBJECT="$col_normal"; fi
if [ -z "$TTBL_DELIM" ]; then TTBL_DELIM=" "; fi
if [ -z "$TTBL_COLOR" ]; then TTBL_COLOR="*"; fi
if [ -z "$TTBL_DAYEND" ]; then TTBL_DAYEND="17"; fi

if [ -z "$TTBL_DAYIS_MSG" ]; then TTBL_DAYIS_MSG="It's"; fi
if [ -z "$TTBL_DAYSET_MSG" ]; then TTBL_DAYSET_MSG="Here's"; fi

hextoansi() {
	ansi="\x1b[38;2;$((16#$(echo "$1" | sed -E "s/.*#(..).*/\1/")));"
	ansi="${ansi}$((16#$(echo "$1" | sed -E "s/.*#..(..).*/\1/")));"
	ansi="${ansi}$((16#$(echo "$1" | sed -E "s/.*#....(..).*/\1/")))m"
	echo "$ansi"
}


mkdir -p "$cache"
mkdir -p "$data"

if [ "$1" = "-h" ] || [ "$1" == "--help" ]; then
	echo "$help"
	exit 0
elif [ "$1" = "-sync" ]; then # sync
	nextDays="$2"
	prevDays="$3"
	token=$(jq -r '.token' < "${data}/token")

	if [ -z "$2" ]; then nextDays="1"; fi
	if [ -z "$3" ]; then prevDays="0"; fi

	# get the timetable
	if [ "$2" = "-mro" ]; then
		tmp=$(curl --silent "${host}/timetable/${token}?dayMinus=${prevDays}&dayPlus=${nextDays}&shorten=true")
	else
		tmp=$(curl --progress-bar "${host}/timetable/${token}?dayMinus=${prevDays}&dayPlus=${nextDays}&shorten=true")
	fi

	# check if timetable is valid
	if [ "$(echo "$tmp" | jq -r '.error')" != "null" ]; then
		echo "$tmp" | jq -r '.error'
		echo "Failed. Check that you have a valid token."
		echo "${host}/timetable/${token}?dayMinus=${prevDays}&dayPlus=${nextDays}&shorten=true"
	else
		if [ ! -f "$timetable" ]; then printf "[\n]" > "$timetable"; fi

		tmp=$(echo "$tmp" | jq '.data.classes')
		tmp=$(jq --argjson arr1 "$tmp" --argjson arr2 "$(cat "$timetable")" -n \
			'$arr2 + $arr1 | unique_by(.startTime)')

		echo "$tmp" > "$timetable"
		echo "Timetable synced"
	fi
	exit 0
elif [ "$1" = "-token" ]; then # get token
	# get the token
	echo "This takes 15-30 seconds, be patient for once."
	if [ "$2" = "-mro" ]; then
		tmp=$(curl --silent -L "${host}/token?username=${2}&password=${3}")
	else
		tmp=$(curl --progress-bar -L "${host}/token?username=${2}&password=${3}")
	fi

	# check if token is valid
	if [ "$(echo "$tmp" | grep -e "^Error" | wc -w)" -gt "0" ]; then
		echo "Something went wrong, try again."
		echo "If you're 100% sure that it was correct, sometimes you just need to try again."
	elif [ "$(echo "$tmp" | jq -r '.token')" = "null" ]; then
		echo "$tmp" | jq -r '.error'
	else
		echo "$tmp" > "${data}/token"
		echo "Token fetched into ${HOME}/.local/share/ttbl/token"
	fi
	exit 0
elif [ ! -z "$1" ] && [ "$(echo "$1" | grep -e "+\?[0-9]\+" | wc -w)" -eq "0" ]; then
	echo "unrecognized option '$1'"
	echo "$help"
	exit 0
fi

# the rest is processing the data
datefmt="%Y%m%d"
if [ -z "$1" ]; then
	if [ "$(date "+%H")" -gt "$TTBL_DAYEND" ]; then
		fetch=$(date -v "+1d" "+%Y%m%d")
		printf "%s" "$TTBL_DAYSET_MSG"
	else
		fetch=$(date "+%Y%m%d")
		printf "%s" "$TTBL_DAYIS_MSG"
	fi
else
	date=$(echo "$1" | grep -e "[-+][0-9]\+")
	if [ -z "$date" ]; then
		date=$1
		fetch=$(date -v "+2d" -v "${date}w" "+${datefmt}")
	else
		fetch=$(date -v "${date}d" "+${datefmt}")
	fi
	printf "%s" "$TTBL_DAYSET_MSG"
fi
date=$(date -j -f "$datefmt" "$fetch" "+%A")

output=$(jq '.[]' < "$timetable" |
	jq -r '"\(.id); \(.periodName); \(.room)\t; \(.description); \(.colour);"')

# date; remove empty lines; remove year number; remove W09; lowercase; remove ` - content`
output=$(printf "%s" "$output" | sed -E "s/^[0-9]{6}-${fetch}; (.*)/\1/ ;
											s/^(.*;) (\t;.*)/\1 N\/A\2/ ;
											/^[0-9]{2}/d")


if [ "$2" = "-mro" ]; then
	printf " %s.\n" "$date"
else
	printf " ${col_cyan}%s${col_normal}. " "$date" # next if statement addresses no \n
fi
if [ "$(echo "$output" | wc -w)" -eq "0" ]; then
	output="The week's ended, go do something productive."
	printf "%s\n" "$output"
	exit 0
fi

if [ "$2" = "-mro" ]; then
	printf "\n%s\n" "$output" | sed -E "s/; #.*// ;
										s/\s*;\s*/;/g"
	exit 0
fi


printf "\n%s\n" "$output" | \
while read -r line; do
	echo "$line" |
		sed -E "s/^([0-9]);(.*?);(.*); #.{6}.*/\
${TTBL_PERIOD}\1\
${TTBL_DELIM}${col_normal}${TTBL_ROOM}\2\
$(hextoansi "$line") ${TTBL_COLOR}${TTBL_SUBJECT}\3\
/"
done

exit 0
