#!/bin/sh

host="https://caulfieldsync.vercel.app/api"
data="$HOME/.local/share/ttbl"
cache="$HOME/.cache/ttbl"

mkdir -p "$cache"
mkdir -p "$data"

if [ "$1" == "-sync" ]; then # sync
	nextDays="$2"
	prevDays="$3"
	token=$(cat "${data}/token" | jq -r '.token')

	if [ -z "$2" ]; then nextDays="1"; fi
	if [ -z "$3" ]; then prevDays="0"; fi

	# get the timetable
	tmp=$(curl --progress-bar "${host}/timetable/${token}?dayMinus=${prevDays}&dayPlus=${nextDays}&shorten=true")

	# check if timetable is valid
	if [ "$(echo "$tmp" | jq -r '.error')" != "null" ]; then
		echo "$tmp" | jq -r '.error'
		echo "Failed. Check that you have a valid token."
		echo "${host}/timetable/${token}?dayMinus=${prevDays}&dayPlus=${nextDays}&shorten=true"
	else
		echo "$tmp" > "${cache}/timetable.json"
		echo "Timetable synced"
	fi
	exit 0
elif [ "$1" == "-token" ]; then # get token
	# get the token
	tmp=$(curl --progress-bar -L "${host}/token?username=${2}&password=${3}")

	# check if token is valid
	if [ $(echo "$tmp" | grep -e "^Error" | wc -l) -gt "0" ]; then
		echo "Something went wrong, try again."
		echo "If you're 100% sure that it was correct, sometimes you just need to try again."
	elif [ "$(echo "$tmp" | jq -r '.token')" == "null" ]; then
		echo "$tmp" | jq -r '.error'
	else
		echo $tmp > "${data}/token"
		echo "Token fetched into ${HOME}/.local/share/ttbl/token"
	fi
	exit 0
fi

# the rest is processing the data
datefmt="%Y%m%d"
if [ -z $1 ]; then
	fetch=$(date "+%Y%m%d")
else
	date=$(echo $1 | grep -e "[-+][0-9]\+")
	if [ -z $date ]; then
		date=$1
		fetch=$(date -v "+1w" -v "${date}w" "+${datefmt}")
	else
		fetch=$(date -v "${date}d" "+${datefmt}")
	fi
fi
echo $(date -j -f "$datefmt" $fetch "+%A")

timetable="$cache/timetable.json"
output=$(jq '.data.classes[]' < "$timetable" |
	jq -r '"\(.id); \(.periodName)| \(.room)\t| \(.detailedName)"')

# date; remove empty lines; remove year number; remove W09; lowercase; remove ` - content`
output=$(printf "%s" "$output" |
	sed -E "s/^[0-9]{6}-${fetch}; (.*)/\1/ ;
			/^[0-9]{2}/d ;
			s/^([0-9]\|.*?\|) 9(.*)/\1\2/ ;
			s/W[0-9]{2}// ;
			s/^([0-9]\|.*?\|)(.*)/\1\L\2/
			s/-.*//")

if [ $(echo $output | wc -w) -gt "1" ]; then
	output="do something productive."
fi
printf "%s\n" "$output"
